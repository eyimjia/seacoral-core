/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/upmio/dbscale-kube/pkg/apis/san/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LungroupLister helps list Lungroups.
type LungroupLister interface {
	// List lists all Lungroups in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Lungroup, err error)
	// Get retrieves the Lungroup from the index for a given name.
	Get(name string) (*v1alpha1.Lungroup, error)
	LungroupListerExpansion
}

// lungroupLister implements the LungroupLister interface.
type lungroupLister struct {
	indexer cache.Indexer
}

// NewLungroupLister returns a new LungroupLister.
func NewLungroupLister(indexer cache.Indexer) LungroupLister {
	return &lungroupLister{indexer: indexer}
}

// List lists all Lungroups in the indexer.
func (s *lungroupLister) List(selector labels.Selector) (ret []*v1alpha1.Lungroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lungroup))
	})
	return ret, err
}

// Get retrieves the Lungroup from the index for a given name.
func (s *lungroupLister) Get(name string) (*v1alpha1.Lungroup, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lungroup"), name)
	}
	return obj.(*v1alpha1.Lungroup), nil
}
